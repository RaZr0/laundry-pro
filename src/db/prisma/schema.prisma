// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer Customer[]
}

model Customer {
  id                   String  @id @default(cuid())
  firstName            String
  lastName             String
  phone                String
  email                String? @unique
  city                 String?
  street               String?
  postalCode           String?
  apartmentFloor       Int?
  apartmentNumber      Int?
  apartmentEntrance    String?
  apartmentEntryCode   String?
  prefrencesNotes      String?
  joinMarketing        Boolean @default(false)
  sendReminders        Boolean @default(false)
  orderAcceptedAlert   Boolean @default(false)
  orderInProgressAlert Boolean @default(false)
  orderReadyAlert      Boolean @default(false)
  orderDeliveredAlert  Boolean @default(false)

  user     User[]
  orders   Order[]
  products Product[]
}

model Order {
  id          String   @id @default(cuid())
  orderNumber String   @unique
  status      String
  createdAt   DateTime @default(now())
  paid        Boolean  @default(false)
  updatedAt   DateTime @updatedAt

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  orderItems OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  service   String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId String
  order   Order @relation(fields: [orderId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  priceUnit   Float
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  orderItems OrderItem[]

  serviceCategoryId String
  serviceCategory   ServiceCategory @relation(fields: [serviceCategoryId], references: [id])
}

model ServiceCategory {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}
